*********GENERAL COMMANDS**********

which git: 	path to git install
git --version:  git version installed

git help <command name>

*********CONFIG**********

--set config
git config --system: system level config, stored in etc/gitconfig
git config --global: user level config, stored in $HOME/.gitconfig
git config: project level config, stored in <project>/.git/config

example: git config --global user.name "Erik Hage"
         git config --global user.email "ehage4@gmail.com"

--check config
git config --list
git config user.name

--set default text editor
git config --global core.editor "path to exe file/ launch command"

--use colors
git config --global color.ui true

*********BASIC LOCAL COMMANDS**********

--initialize
git init

--status
git status

--commit
git add .: add all changes to staging
git commit -m "message here": commit staged changes
git commit -a : add + commmit at same time
git commit -am "message" : -a and message

--viewing commits
git show <SHA> : log entry and diffs for SHA

--commit log
git log
git log --oneline
git log --author="ErikHage"
git log -n <number> : returns n most recent messages
git log --since=2012-06-15 : commits since date
git log --until=2012-06-15 : commits until date
git log --graph --decorate --oneline --abbrev-commit --all
git log --grep="<regex>"
git log -p : patch log, shows diffs
git log --stat --summary : lines committed per file
git log --format=oneline : other formats = short, medium, full, fuller, email, raw

--diffs
git diff : HEAD vs working directory
git diff <filename>
git diff --staged : staged vs HEAD
git diff --color-words <filename> : red for deletes, green for adds
git diff <SHA> : current dir vs SHA
git diff <SHA>..<SHA>
git diff <SHA>..<SHA> <filename>
git diff --stat --summary <SHA>..<SHA> <filename>
git diff --ignore-space-change

--deleting files
git rm <deleted file name> : not safe_rm, unix style remove

--renaming/moving files
git mv <filename> <new filename>

--undo changes
git checkout --<filename> : -- means current branch

--unstaging
git reset HEAD <filename>

--amending commits (only most recent commit, SHA changes)
git add <filename>
git commit --amend -m "message"

--retrieving old versions
git checkout <SHA> -- <filename>
git commit -m "reverting changes from <SHA>"

--revert command
git revert <SHA> : complete commit

--reset command
git reset --soft : does not change stating or working copies
get reset --mixed : changes staging to match repository, does not change working copy
git reset --hard : changed staging and working copies to match repository

--removing untracked files (doesn't effect staged items)
git clean -n : test run
git clean -f : force run

--ignoring files
project/.gitignore : match filenames to ignore
git config --global core.excludesfile ~/.gitignore.global

--tracking empty directories
put a small file in there (.gitkeep is commonly used)

--Exploring tree listings
git ls-tree <tree-ish> : ex -> git ls-tree HEAD
<SHA> : at least 4 characters, best 8-10
<SHA>^ : parent commit
<SHA>^^ / <SHA>~2: grandparent commit
<SHA>^^^ / <SHA>~3: great grandparent commit


*********BRANCHING COMMANDS**********

--view branches
git branch
git branch <branchname>

--switching branches
git checkout <branchname>
git checkout -b <branchname> : create and switch

--comparing branches
git diff <branch1>..<branch2>
git branch --merged : all branches included in current branch

--renaming branches
git branch -m <branchname> <newname>

--deleting branches
git branch -d <branchname> : can't delete if checked out, warning if not fully merged
git branch -D <branchname> : override warning if not fully merged

--merging code
git merge <branchname> : be in recieving branch

--fast forward merge vs true merge
FF merge - if HEAD is an ancestor of branch (no separate commits)
git merge --ff-only <branchname>
	SHA->SHA->HEAD
		      \
			->Branch

True merge - has a merge commit
git merge --no-ff <branchname>

--resolving merge conflicts
1) git merge --abort : aborts merge
2) resolve conflicts manually, then add + commit
3) use git merge tools 

--stashing changes
git stash save "message" : stashes changes and resets to HEAD
git stash list : shows stashed changes
git stash show stash@{#} : show diffs
git stash show -p stash@{#} : show diffs with edits

--retrieving stashed changes
git stash pop
git stash apply
git stash <pop/apply> stash@{#}

--delete from stash
git stash drop stash@{#} : delete specific entry
git stash clear : clears entire stash


*********REMOTE COMMANDS**********

--adding a remote repo
git remote : list remotes
git remote add <alias> <url>
git remote -v : shows remote details
git remote rm <alias> : remove remote

--creating a remote branch
git push -u <alias> <branch to push>
git branch -r : list remote branches
git branch -a : all branches

--cloning a remote repo (pulls down master branch by default)
git clone <url>
git clone <url> <project name>

--tracking remote branches
git config branch.branchname.merge refs/heads/master
git branch --set-upstream <branchname> origin/<branchname>

--push changes to remote repo
git push <alias> <branchname> : for non-tracking branch
git push : for tracking branch

--fetching changes from remote repo
git fetch <alias> : usually origin
git fetch : if only one remote repo
**fetch only updates origin/master, not master
**therefore not harmful to fetch

--pulling remote branches
git pull : git fetch + git merge
git pull <alias> <branchname>

--checkout remote branvhes
git branch <branchname> <sourcebranch>
git checkout -b <branchname> <sourcebranch> : checkout + create

--deleting a remote branch
git push origin :<branchname>
git push origin --delete <brnachname>


*********ALIAS COMMANDS**********
git config --global alias.<alias> "command"

examples:
git config --global alias.st "status"
git config --global alias.lol "log --graph --decorate --online -- abbrev-commit --all"

 




